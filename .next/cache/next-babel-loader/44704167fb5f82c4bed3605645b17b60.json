{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport Layout from '../../components/Layout';\nimport { Link } from '../../routes';\nimport verify from '../../ethereum/academic/verify';\n\nconst path = require('path'); //const fs = require('fs-extra');\n\n\nclass CertificateIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      selectedFile: null,\n      hashValue: '',\n      message: ''\n    });\n\n    _defineProperty(this, \"onFileChange\", event => {\n      this.setState({\n        selectedFile: event.target.files[0]\n      });\n      const curFile = event.target.files[0];\n      const reader = new FileReader();\n      var that = this;\n      reader.readAsText(curFile);\n\n      reader.onload = function (e) {\n        //console.log('file:', e.target.result);\n        let jsonData = JSON.parse(this.result); //console.log(jsonData);\n        // hash json\n\n        let reader = new FileReader();\n        reader.readAsArrayBuffer(curFile);\n\n        reader.onload = function (e) {\n          var wordArray = CryptoJS.lib.WordArray.create(reader.result);\n          var hash = CryptoJS.SHA256(wordArray).toString();\n          this.hashValue = hash;\n          that.setState({\n            hashValue: hash\n          });\n          console.log(that.state.hashValue);\n        };\n      }; // build json\n      // const buildPath = path.resolve(__dirname, 'build');\n      // // const source = fs.readFileSync(jsonData, 'utf8');\n      // // const output = solc.compile(source, 1).contracts;\n      // fs.ensureDirSync(buildPath);\n      // //console.log(output);\n      // fs.outputJsonSync(\n      //   path.resolve(buildPath, 'certificate.json'),\n      //   jsonData\n      //   );\n\n    });\n\n    _defineProperty(this, \"fileData\", () => {\n      if (this.state.selectedFile) {\n        return __jsx(\"div\", null, __jsx(\"h2\", null, \"File Details:\"), __jsx(\"p\", null, \"File Name: \", this.state.selectedFile.name), __jsx(\"p\", null, \"File Type: \", this.state.selectedFile.type));\n      }\n    });\n\n    _defineProperty(this, \"onClick\", async () => {\n      const accounts = await web3.eth.getAccounts();\n      this.setState({\n        message: 'Waiting on verifing success...'\n      }); //console.log(this.state.hashValue);\n\n      await verify.methods.validation(this.state.hashValue).send({\n        from: accounts[0]\n      });\n      this.setState({\n        message: 'A certificate has been verified!'\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Layout, null, __jsx(\"script\", {\n      src: \"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.js\"\n    }), __jsx(\"h1\", null, \"Verify Certificates\"), __jsx(Form, null, __jsx(\"h3\", null, \"Choose a JSON file\"), __jsx(\"input\", {\n      type: \"file\",\n      onChange: this.onFileChange,\n      accept: \"application/json\",\n      style: {\n        marginBottom: 20\n      }\n    }), this.fileData(), __jsx(Link, {\n      route: `/Academic/certificates/${this.hashValue}/success`\n    }, __jsx(\"a\", null, __jsx(Button, {\n      onClick: this.onClick,\n      content: \"Verify\",\n      icon: \"check circle outline\",\n      primary: true,\n      style: {\n        marginTop: 20\n      }\n    }))), __jsx(\"h1\", null, this.state.message)));\n  }\n\n}\n\nexport default CertificateIndex;","map":{"version":3,"sources":["C:/Users/user/Desktop/college/Blockchain/DApp/nextjs-web/pages/Academic/index.js"],"names":["React","Component","Button","Form","Layout","Link","verify","path","require","CertificateIndex","selectedFile","hashValue","message","event","setState","target","files","curFile","reader","FileReader","that","readAsText","onload","e","jsonData","JSON","parse","result","readAsArrayBuffer","wordArray","CryptoJS","lib","WordArray","create","hash","SHA256","toString","console","log","state","name","type","accounts","web3","eth","getAccounts","methods","validation","send","from","render","onFileChange","marginBottom","fileData","onClick","marginTop"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Form } from 'semantic-ui-react';\r\nimport Layout from '../../components/Layout';\r\nimport { Link } from '../../routes';\r\nimport verify from '../../ethereum/academic/verify';\r\nconst path = require('path');\r\n//const fs = require('fs-extra');\r\n\r\nclass CertificateIndex extends Component {\r\n  state = { \r\n    selectedFile: null,\r\n    hashValue: '',\r\n    message: ''\r\n  };\r\n\r\n  onFileChange = event => {\r\n    this.setState({ selectedFile: event.target.files[0] });\r\n\r\n    const curFile = event.target.files[0];\r\n    const reader = new FileReader();\r\n    var that = this;\r\n    reader.readAsText(curFile);\r\n    reader.onload = function (e) {\r\n      //console.log('file:', e.target.result);\r\n      let jsonData = JSON.parse(this.result);\r\n      //console.log(jsonData);\r\n\r\n      // hash json\r\n      let reader = new FileReader();\r\n      reader.readAsArrayBuffer(curFile);\r\n      reader.onload = function (e) {\r\n        var wordArray = CryptoJS.lib.WordArray.create(reader.result);\r\n        var hash = CryptoJS.SHA256(wordArray).toString();\r\n        this.hashValue = hash;\r\n        that.setState({ hashValue: hash });\r\n        console.log(that.state.hashValue);\r\n      };\r\n    };\r\n\r\n    // build json\r\n    // const buildPath = path.resolve(__dirname, 'build');\r\n\r\n    // // const source = fs.readFileSync(jsonData, 'utf8');\r\n    // // const output = solc.compile(source, 1).contracts;\r\n\r\n    // fs.ensureDirSync(buildPath);\r\n\r\n    // //console.log(output);\r\n    // fs.outputJsonSync(\r\n    //   path.resolve(buildPath, 'certificate.json'),\r\n    //   jsonData\r\n    //   );\r\n  };\r\n\r\n  fileData = () => {\r\n    if (this.state.selectedFile) {\r\n      return (\r\n        <div>\r\n          <h2>File Details:</h2>\r\n          <p>File Name: {this.state.selectedFile.name}</p>\r\n          <p>File Type: {this.state.selectedFile.type}</p>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  onClick = async () => {\r\n    const accounts = await web3.eth.getAccounts();\r\n\r\n    this.setState({ message: 'Waiting on verifing success...' })\r\n\r\n    //console.log(this.state.hashValue);\r\n    await verify.methods.validation(this.state.hashValue).send({\r\n      from: accounts[0]\r\n    });\r\n\r\n    this.setState({ message: 'A certificate has been verified!' })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.js\"></script>\r\n        <h1>Verify Certificates</h1>\r\n        <Form>\r\n          <h3>Choose a JSON file</h3>\r\n          <input\r\n            type=\"file\"\r\n            onChange={this.onFileChange}\r\n            accept=\"application/json\"\r\n            style={{ marginBottom: 20 }}\r\n          />\r\n          {this.fileData()}\r\n          <Link route={`/Academic/certificates/${this.hashValue}/success`}>\r\n            <a>\r\n              <Button\r\n                onClick={this.onClick}\r\n                content='Verify'\r\n                icon='check circle outline'\r\n                primary={true}\r\n                style={{ marginTop: 20 }}\r\n              />\r\n            </a>\r\n          </Link>\r\n          <h1>{this.state.message}</h1>\r\n        </Form>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CertificateIndex;"]},"metadata":{},"sourceType":"module"}