{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Button, Form, Message } from 'semantic-ui-react';\nimport Layout from '../../components/Layout';\nimport { Link, Router } from '../../routes';\nimport verify from '../../ethereum/academic/verify';\n\nconst path = require('path'); //const fs = require('fs-extra');\n\n\nclass CertificateIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      selectedFile: null,\n      hashValue: '',\n      school: '',\n      errorMessage: '',\n      loading: false\n    });\n\n    _defineProperty(this, \"onFileChange\", event => {\n      this.setState({\n        selectedFile: event.target.files[0],\n        errorMessage: ''\n      });\n      const curFile = event.target.files[0];\n      const reader = new FileReader();\n      var that = this;\n      reader.readAsText(curFile);\n\n      reader.onload = function (e) {\n        //console.log('file:', e.target.result);\n        let jsonData = JSON.parse(this.result);\n        console.log(jsonData.iss); // hash json\n\n        let reader = new FileReader();\n        reader.readAsArrayBuffer(curFile);\n\n        reader.onload = function (e) {\n          var wordArray = CryptoJS.lib.WordArray.create(reader.result);\n          var hash = CryptoJS.SHA256(wordArray).toString();\n          this.hashValue = hash;\n          that.setState({\n            hashValue: hash\n          });\n          console.log(that.state.hashValue);\n        };\n      }; // build json\n      // const buildPath = path.resolve(__dirname, 'build');\n      // // const source = fs.readFileSync(jsonData, 'utf8');\n      // // const output = solc.compile(source, 1).contracts;\n      // fs.ensureDirSync(buildPath);\n      // //console.log(output);\n      // fs.outputJsonSync(\n      //   path.resolve(buildPath, 'certificate.json'),\n      //   jsonData\n      //   );\n\n    });\n\n    _defineProperty(this, \"fileData\", () => {\n      if (this.state.selectedFile) {\n        return __jsx(\"div\", null, __jsx(\"h2\", null, \"File Details:\"), __jsx(\"p\", null, \"File Name: \", this.state.selectedFile.name), __jsx(\"p\", null, \"File Type: \", this.state.selectedFile.type));\n      }\n    });\n\n    _defineProperty(this, \"onClick\", async () => {\n      this.setState({\n        loading: true,\n        errorMessage: ''\n      }); //console.log(this.state.hashValue);\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        await verify.methods.validation(this.state.hashValue).send({\n          from: accounts[0]\n        });\n        await verify.methods.legality(this.state.hashValue).send({\n          from: accounts[0]\n        });\n        Router.pushRoute(`/Academic/certificates/${this.state.hashValue}/success`);\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Layout, null, __jsx(\"script\", {\n      src: \"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.js\"\n    }), __jsx(\"h1\", null, \"Verify Certificates\"), __jsx(Form, {\n      error: !!this.state.errorMessage\n    }, __jsx(\"h3\", null, \"Choose a JSON file\"), __jsx(\"input\", {\n      type: \"file\",\n      onChange: this.onFileChange,\n      accept: \"application/json\",\n      style: {\n        marginBottom: 20\n      }\n    }), this.fileData(), __jsx(\"a\", null, __jsx(Button, {\n      onClick: this.onClick,\n      loading: this.state.loading,\n      content: \"Verify\",\n      icon: \"check circle outline\",\n      primary: true,\n      style: {\n        marginTop: 20\n      }\n    })), __jsx(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.errorMessage\n    })));\n  }\n\n}\n\nexport default CertificateIndex;","map":{"version":3,"sources":["C:/Users/user/Desktop/college/Blockchain/DApp/nextjs-web/pages/Academic/index.js"],"names":["React","Component","Button","Form","Message","Layout","Link","Router","verify","path","require","CertificateIndex","selectedFile","hashValue","school","errorMessage","loading","event","setState","target","files","curFile","reader","FileReader","that","readAsText","onload","e","jsonData","JSON","parse","result","console","log","iss","readAsArrayBuffer","wordArray","CryptoJS","lib","WordArray","create","hash","SHA256","toString","state","name","type","accounts","web3","eth","getAccounts","methods","validation","send","from","legality","pushRoute","err","message","render","onFileChange","marginBottom","fileData","onClick","marginTop"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Form, Message } from 'semantic-ui-react';\r\nimport Layout from '../../components/Layout';\r\nimport { Link, Router } from '../../routes';\r\nimport verify from '../../ethereum/academic/verify';\r\nconst path = require('path');\r\n//const fs = require('fs-extra');\r\n\r\nclass CertificateIndex extends Component {\r\n  state = {\r\n    selectedFile: null,\r\n    hashValue: '',\r\n    school: '',\r\n    errorMessage: '',\r\n    loading: false\r\n  };\r\n\r\n  onFileChange = event => {\r\n    this.setState({\r\n      selectedFile: event.target.files[0],\r\n      errorMessage: ''\r\n    });\r\n\r\n    const curFile = event.target.files[0];\r\n    const reader = new FileReader();\r\n    var that = this;\r\n    reader.readAsText(curFile);\r\n    reader.onload = function (e) {\r\n      //console.log('file:', e.target.result);\r\n      let jsonData = JSON.parse(this.result);\r\n      console.log(jsonData.iss);\r\n\r\n      // hash json\r\n      let reader = new FileReader();\r\n      reader.readAsArrayBuffer(curFile);\r\n      reader.onload = function (e) {\r\n        var wordArray = CryptoJS.lib.WordArray.create(reader.result);\r\n        var hash = CryptoJS.SHA256(wordArray).toString();\r\n        this.hashValue = hash;\r\n        that.setState({ hashValue: hash });\r\n        console.log(that.state.hashValue);\r\n      };\r\n    };\r\n\r\n    // build json\r\n    // const buildPath = path.resolve(__dirname, 'build');\r\n\r\n    // // const source = fs.readFileSync(jsonData, 'utf8');\r\n    // // const output = solc.compile(source, 1).contracts;\r\n\r\n    // fs.ensureDirSync(buildPath);\r\n\r\n    // //console.log(output);\r\n    // fs.outputJsonSync(\r\n    //   path.resolve(buildPath, 'certificate.json'),\r\n    //   jsonData\r\n    //   );\r\n  };\r\n\r\n  fileData = () => {\r\n    if (this.state.selectedFile) {\r\n      return (\r\n        <div>\r\n          <h2>File Details:</h2>\r\n          <p>File Name: {this.state.selectedFile.name}</p>\r\n          <p>File Type: {this.state.selectedFile.type}</p>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  onClick = async () => {\r\n    this.setState({ loading: true, errorMessage: '' });\r\n\r\n    //console.log(this.state.hashValue);\r\n    try {\r\n      const accounts = await web3.eth.getAccounts();\r\n      await verify.methods.validation(this.state.hashValue).send({\r\n        from: accounts[0]\r\n      });\r\n\r\n      await verify.methods.legality(this.state.hashValue).send({\r\n        from: accounts[0]\r\n      });\r\n\r\n      Router.pushRoute(`/Academic/certificates/${this.state.hashValue}/success`);\r\n    } catch (err) {\r\n      this.setState({ errorMessage: err.message });\r\n    }\r\n    this.setState({ loading: false });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.js\"></script>\r\n        <h1>Verify Certificates</h1>\r\n        <Form error={!!this.state.errorMessage}>\r\n          <h3>Choose a JSON file</h3>\r\n          <input\r\n            type=\"file\"\r\n            onChange={this.onFileChange}\r\n            accept=\"application/json\"\r\n            style={{ marginBottom: 20 }}\r\n          />\r\n          {this.fileData()}\r\n          <a>\r\n            <Button\r\n              onClick={this.onClick}\r\n              loading={this.state.loading}\r\n              content='Verify'\r\n              icon='check circle outline'\r\n              primary={true}\r\n              style={{ marginTop: 20 }}\r\n            />\r\n          </a>\r\n          <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n        </Form>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CertificateIndex;"]},"metadata":{},"sourceType":"module"}